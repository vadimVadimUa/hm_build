{"version":3,"sources":["SetData.js","Calculation.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["AppSetData","props","storageKey","SEPARATOR","RELATIONS","initData","localStorage","getItem","state","JSON","parse","A","f","g","x","limit","relation","submitData","e","setItem","stringify","prepare","replace","split","map","onDataSubmit","onChangeInput","ev","setState","target","value","changeInputF","idx","evt","newF","fidx","changeInputG","field","newG","gidx","removeInputF","filter","removeInputG","addInputF","addInputG","genInputsF","key","type","className","name","onChange","onClick","genInputsG","r","i","inputA","this","React","Component","SetItem","set","fixed","val","AppCalculation","data","g1","cof","g1_","g1_map_origin","g1_nums","g1_value","g1_relation","graph","table","array_original","similarByA","initValues","sortG1","genSets","checkGraph","buildFlatTable","buildOriginalPositionArray","onCalcDone","a","b","model","g_limit","g_relation","array_finish","genCountSimilar","forEach","item","needCheck","push","convertToOriginalG1","max","min","getGraph","arrayPoint","originalPosition","number","index","position","sort","console","log","sortedA","sortNumber","count","length","partMax","slice","partMin","reverse","genGraph","index1","index2","arr","buff","initArr","n","j","k","swap","l","resultArr","getCombStep","array","initState","prevWorkIndex","initA","clearedA","Set","result","workIndex","countIndex","point","indexOf","notFindNext","currPoint","findIndexInA","lastIndexOf","nextValue","testCurrPoint","checkOverAinPoint","similarPoint","Object","keys","maxSet","minSet","minGen","generationMinimum","maxGen","generationMaximum","calculateArrays","isInRelation","isOutInRelation","maxVal","minVal","relationValue","valueArr","value2Arr","reduce","prev","classList","join","genTable","displayALl","nextPermutation","temp","isIncreased","AppMain","similar","modes","genModel","mode","maxLen","clearDuplicate","getOnlySimilarInAllG","isShowCalc","modelCalc","handleDataSubmit","bind","reset","changeMode","event","modelData","clear","itemStr","add","unicalArr","Array","from","similarCount","similarKeys","unical","common","Accordion","defaultActiveKey","renderStep","Card","Header","Toggle","as","variant","eventKey","Collapse","Body","persist","m","renderSteps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f636c4f0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class AppSetData extends React.Component {\r\n\r\n  storageKey = 'data';\r\n  SEPARATOR = ',';\r\n  RELATIONS = ['=', '>=', '<=', '<', '>'];\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.initData();\r\n  }\r\n\r\n  initData = () => {\r\n    if(localStorage.getItem(this.storageKey)){\r\n      this.state = JSON.parse(localStorage.getItem(this.storageKey));\r\n    } else {\r\n      this.state = {\r\n        A: '',\r\n        f: [''],\r\n        g: [{x: '', limit: 0, relation: '='}]\r\n      };\r\n    }\r\n  };\r\n\r\n  submitData = (e) => {\r\n    localStorage.setItem('data', JSON.stringify(this.state));\r\n    const prepare = {...this.state};\r\n    prepare.A = prepare.A.replace(/\\s+/g, '').split(this.SEPARATOR).map( x => +x);\r\n    prepare.f = prepare.f.map( f => {\r\n      return  f.replace(/\\s+/g, '').split(this.SEPARATOR).map( x => +x);\r\n    });\r\n    prepare.g = prepare.g.map( g => {\r\n      return {\r\n        x: g.x.replace(/\\s+/g, '').split(this.SEPARATOR).map( x => +x),\r\n        limit: +g.limit,\r\n        relation: g.relation\r\n      };\r\n    });\r\n    this.props.onDataSubmit(prepare);\r\n  };\r\n\r\n  onChangeInput = (ev)  => {\r\n    this.setState({\r\n      A: ev.target.value\r\n    });\r\n  };\r\n\r\n  changeInputF = idx => evt => {\r\n    const newF = this.state.f.map((f, fidx) => {\r\n      if (idx !== fidx) return f;\r\n      return evt.target.value;\r\n    });\r\n    this.setState({f: newF});\r\n  };\r\n\r\n  changeInputG = (idx, field) => evt => {\r\n    const newG = this.state.g.map((g, gidx) => {\r\n      if (idx !== gidx) return g;\r\n      return {...g, [field]: evt.target.value};\r\n    });\r\n    this.setState({g: newG});\r\n  };\r\n\r\n  removeInputF = (idx) => evt => {\r\n    this.setState({\r\n      f: this.state.f.filter((f, fidx) => fidx !== idx)\r\n    })\r\n  };\r\n\r\n  removeInputG = (idx) => evt => {\r\n    this.setState({\r\n      g: this.state.g.filter((g, gidx) => gidx !== idx)\r\n    })\r\n  };\r\n\r\n  addInputF = () => {\r\n    this.setState({\r\n      f: [...this.state.f, '']\r\n    });\r\n  };\r\n\r\n  addInputG = () => {\r\n    this.setState({\r\n      g: [...this.state.g, {x: '', limit: 0}]\r\n    });\r\n  };\r\n\r\n  genInputsF = () => {\r\n    return this.state.f.map((f, idx) =>\r\n      (<div key={idx}>\r\n        <b> f {idx + 1} </b>\r\n        <input type=\"text\"\r\n               className=\"appSetData__F\"\r\n               value={f}\r\n               name={idx}\r\n               onChange={this.changeInputF(idx)}/>\r\n        <button onClick={this.removeInputF(idx)}>-</button>\r\n      </div>));\r\n  };\r\n\r\n  genInputsG = () => {\r\n    return this.state.g.map((g, idx) =>\r\n      (<div key={idx}>\r\n        <b> g {idx + 1} </b>\r\n        <input type=\"text\"\r\n               className=\"appSetData__G\"\r\n               value={g.x}\r\n               name={idx}\r\n               onChange={this.changeInputG(idx, 'x')}/>\r\n        <select\r\n          className=\"appSetData__G-relation\"\r\n          value={g.relation}\r\n          onChange={ this.changeInputG(idx, 'relation')}>\r\n          {\r\n            this.RELATIONS.map( (r, i) => {\r\n              return (<option key={i} value={r}>{r}</option>);\r\n            })\r\n            }\r\n           }\r\n        </select>\r\n        <input type=\"number\"\r\n               className=\"appSetData__G-limit\"\r\n               value={g.limit}\r\n               name={'limit_' + idx}\r\n               onChange={this.changeInputG(idx, 'limit')}/>\r\n        <button onClick={this.removeInputG(idx)}>-</button>\r\n      </div>));\r\n  };\r\n\r\n  inputA = () => {\r\n    return (\r\n      <div>\r\n        <b>A </b>\r\n        <input className=\"appSetData__A\" name=\"A\" value={this.state.A} onChange={this.onChangeInput}/>\r\n    </div>\r\n    )\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"appSetData\">\r\n        { this.inputA() }\r\n        <div>{this.genInputsF()}</div>\r\n        <div>\r\n          <button onClick={this.addInputF}>Add f</button>\r\n        </div>\r\n        <div>{this.genInputsG()}</div>\r\n        <div>\r\n          <button onClick={this.addInputG}>Add g</button>\r\n        </div>\r\n        <button onClick={this.submitData}>Calculate</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\n\r\nclass SetItem {\r\n  set = [];\r\n  val = 0;\r\n  fixed = 0;\r\n\r\n  constructor(set, value, fixed) {\r\n    this.set = [...set];\r\n    this.val = value;\r\n    this.fixed = fixed;\r\n  }\r\n}\r\n\r\nexport default class AppCalculation extends React.Component {\r\n\r\n  data = {\r\n    A: [1, 2, 3, 4, 5],\r\n    g1: [{cof: 2, x: 0}, {cof: 4, x: 1}, {cof: 1, x: 2}, {cof: 7, x: 3}, {cof: 5, x: 4}],\r\n    g1_: [],\r\n    g1_map_origin: {},\r\n    g1_nums: [],\r\n    g1_value: 50,\r\n    g1_relation: '',\r\n    graph: [],\r\n    table: [],\r\n    array_original: [],\r\n    similarByA: {}\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.initValues(props);\r\n    // console.log(this.generationMaximum([2,4,5,5,2], [1,1,2,2,3,4,5,5], 5, 1));\r\n    // return;\r\n    this.sortG1();\r\n    this.genSets();\r\n    this.checkGraph(this.data.graph);\r\n    this.buildFlatTable();\r\n    this.buildOriginalPositionArray();\r\n    this.props.onCalcDone(this.data.array_original);\r\n  }\r\n\r\n  sortNumber(a, b) {\r\n    return a - b;\r\n  }\r\n\r\n  initValues(props) {\r\n    if (props.model) {\r\n      const model = props.model;\r\n      this.data.A = model.A;\r\n      this.data.g1 = model.g.map((value, idx) => {\r\n        return {x: idx, cof: value}\r\n      });\r\n      this.data.g1_ = [];\r\n      this.data.g1_map_origin = {};\r\n      this.data.g1_nums = [];\r\n      this.data.g1_value = model.g_limit;\r\n      this.data.g1_relation = model.g_relation;\r\n      this.data.graph = [];\r\n      this.data.table = [];\r\n      this.data.array_original = [];\r\n      this.data.array_finish = [];\r\n      this.data.similarByA = this.genCountSimilar(this.data.A);\r\n      //this.data.similarByA = this.genCountSimilar([1,1,2,2,3,4,5,5]);\r\n    }\r\n  }\r\n\r\n  buildOriginalPositionArray() {\r\n    this.data.array_original = [];\r\n    this.data.table.forEach(item => {\r\n      item.forEach(i => {\r\n        if (i.needCheck === false) {\r\n          this.data.array_original.push(this.convertToOriginalG1(i.max.set));\r\n          this.data.array_original.push(this.convertToOriginalG1(i.min.set));\r\n          this.data.array_finish.push(i.max.set);\r\n          this.data.array_finish.push(i.min.set);\r\n        }\r\n      })\r\n    });\r\n    //console.log(this.data.array_original, this.data.array_finish);\r\n  }\r\n\r\n  buildFlatTable() {\r\n    this.data.table.push(this.data.graph);\r\n    const getGraph = (graph) => {\r\n      if (graph) graph.forEach(item => {\r\n        if (item && item.graph) {\r\n          this.data.table.push(item.graph);\r\n        }\r\n        getGraph(item.graph);\r\n      });\r\n    };\r\n    getGraph(this.data.graph);\r\n  }\r\n\r\n  convertToOriginalG1(arrayPoint) {\r\n    let originalPosition = [];\r\n    arrayPoint.forEach((number, index) => {\r\n      let position = this.data.g1_map_origin[index];\r\n      originalPosition[position] = number;\r\n    });\r\n    return originalPosition;\r\n  }\r\n\r\n  sortG1() {\r\n    this.data.g1_ = [...this.data.g1.sort((a, b) => a.cof - b.cof)];\r\n    this.data.g1_nums = this.data.g1_.map(item => item.cof); //after sort\r\n    this.data.g1_map_origin = {};\r\n    this.data.g1_.forEach((item, index) => {\r\n      this.data.g1_map_origin[index] = item.x //x = position in original\r\n    });\r\n    console.log(this.data.g1_map_origin);\r\n  }\r\n\r\n  genSets() {\r\n    let sortedA = [...this.data.A.sort(this.sortNumber)];\r\n    let count = this.data.g1.length;\r\n    // let clearedA = [...new Set(this.data.A)];\r\n    // if (count > clearedA.length) {\r\n    //   count = clearedA.length;\r\n    // }\r\n    //if(count > sortedA.length) count = sortedA.length;\r\n    let partMax = sortedA.slice(-count);\r\n    let partMin = sortedA.slice(0, count).reverse();\r\n    this.genGraph(partMax, partMin, 0, this.data.graph);\r\n  }\r\n\r\n  swap(index1, index2, arr) {\r\n    let buff = arr[index1];\r\n    arr[index1] = arr[index2];\r\n    arr[index2] = buff;\r\n    return [...arr];\r\n  }\r\n\r\n  getCombStep(initArr, n) {\r\n    let arr = [...initArr];\r\n    let j = n - 2;\r\n    while (j !== -1 && arr[j] >= arr[j + 1]) {\r\n      j--;\r\n    }\r\n    if (j === -1)\r\n      return 'end'; // больше перестановок нет\r\n    let k = n - 1;\r\n    while (arr[j] >= arr[k]) k--;\r\n    this.swap(j, k, arr);\r\n    let l = j + 1;\r\n    let r = n - 1; // сортируем оставшуюся часть последовательности\r\n    while (l < r) {\r\n      arr = this.swap(l++, r--, arr);\r\n    }\r\n    return arr;\r\n  }\r\n\r\n  getCombination(initArr, n) {\r\n    let resultArr = [];\r\n    let arr = [...initArr];\r\n    do {\r\n      arr = this.getCombStep(arr, n);\r\n      if (arr !== 'end') {\r\n        resultArr.push([...arr]);\r\n      } else break;\r\n    } while (true);\r\n    return resultArr;\r\n  }\r\n\r\n  // return object with  key = unic value, value = count, {2: 4}\r\n  genCountSimilar(array) {\r\n    let count = {};\r\n    array.forEach((x) => {\r\n      count[x] = (count[x] || 0) + 1;\r\n    });\r\n    return count;\r\n  }\r\n\r\n  generationMinimum(initState, A, count, fixed = 0) {\r\n    let prevWorkIndex;\r\n    let initA = [...A];\r\n    let clearedA = [...new Set(initA)];\r\n    let result = [];\r\n    let workIndex = initState.length - 2 - fixed; // calculate next step values, 2 because first step we do\r\n    prevWorkIndex = workIndex;\r\n    let countIndex = initState.length - 1 - fixed; // all from A (except similar)\r\n    let point = [...initState];\r\n    //point[countIndex] = clearedA[0];\r\n    let i = clearedA.indexOf(point[countIndex]);\r\n    i++;\r\n    result.push(point); //first point\r\n\r\n    while (i < clearedA.length) { //start from 1\r\n      let notFindNext = false;\r\n      let currPoint = [...result[result.length - 1]]; //create current point from last point\r\n      currPoint[countIndex] = clearedA[i]; //for iterator index we use only unic values from A\r\n      if (workIndex >= 0) { //try find combination numbers\r\n        let findIndexInA = initA.lastIndexOf(currPoint[workIndex]);\r\n        while (findIndexInA - 1 >= 0) {\r\n          let nextValue = initA[findIndexInA - 1]; // if 5 then 6 in A = { 5,6,7 }\r\n          let testCurrPoint = [...currPoint];\r\n          testCurrPoint[workIndex] = nextValue;\r\n          findIndexInA -= 1;\r\n          if (this.checkOverAinPoint(testCurrPoint)) {\r\n            notFindNext = false;\r\n            break;\r\n          } else {\r\n            notFindNext = true;\r\n          }\r\n        }\r\n        if (notFindNext === true && workIndex >= 0) {\r\n          workIndex--; //try other number, move to left\r\n        } else {\r\n          currPoint[workIndex] = initA[findIndexInA];\r\n          if (this.checkOverAinPoint(currPoint)) result.push(currPoint);\r\n          if (workIndex >= 0) {\r\n            workIndex--;\r\n            prevWorkIndex = workIndex;\r\n          }\r\n          i++;\r\n        }\r\n      } else { //after check all numbers in this step then try other step\r\n        if (this.checkOverAinPoint(currPoint)) result.push(currPoint);\r\n        workIndex = prevWorkIndex; //try from previous position but with other count number (index)\r\n        i++;\r\n      }\r\n    }\r\n    result = result.reverse();\r\n    return result;\r\n  }\r\n\r\n  generationMaximum(initState, A, count, fixed = 0) {\r\n    let prevWorkIndex;\r\n    let initA = [...A];\r\n    let clearedA = [...new Set(initA)];\r\n    let result = [];\r\n    let workIndex = initState.length - 2 - fixed; // calculate next step values, 2 because first step we do\r\n    prevWorkIndex = workIndex;\r\n    let countIndex = initState.length - 1 - fixed; // all from A (except similar)\r\n    let point = [...initState];\r\n    let i = clearedA.indexOf(point[countIndex]);\r\n    i--;\r\n    //point[countIndex] = clearedA[clearedA.length - 1];\r\n    result.push(point); //first point\r\n    //let i = clearedA.length - 1;\r\n    while (i >= 0) { //start from last index - 1\r\n      let notFindNext = false;\r\n      let currPoint = [...result[result.length - 1]]; //create current point from last point\r\n      currPoint[countIndex] = clearedA[i]; //for iterator index we use only unic values from A\r\n      if (workIndex >= 0) {\r\n        let findIndexInA = initA.indexOf(currPoint[workIndex]);\r\n        while (findIndexInA + 1 < initA.length) {\r\n          let nextValue = initA[findIndexInA + 1]; // if 5 then 6 in A = { 5,6,7 }\r\n          let testCurrPoint = [...currPoint];\r\n          testCurrPoint[workIndex] = nextValue;\r\n          findIndexInA += 1;\r\n          if (this.checkOverAinPoint(testCurrPoint)) {\r\n            notFindNext = false;\r\n            break;\r\n          } else {\r\n            notFindNext = true;\r\n          }\r\n        }\r\n        if (notFindNext === true && workIndex >= 0) {\r\n          workIndex--; //try other number, move to left\r\n        } else {\r\n          currPoint[workIndex] = initA[findIndexInA];\r\n          if (this.checkOverAinPoint(currPoint)) result.push(currPoint);\r\n          if (workIndex >= 0) {\r\n            workIndex--;\r\n            prevWorkIndex = workIndex; //save index for situation when need use previous step\r\n          }\r\n          i--; //change count step\r\n        }\r\n      } else {\r\n        if (this.checkOverAinPoint(currPoint)) result.push(currPoint);\r\n        workIndex = prevWorkIndex;\r\n        i--;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  checkOverAinPoint(point) {\r\n    let similarPoint = this.genCountSimilar(point);\r\n    let isAllNumberOK = Object.keys(similarPoint).filter(key =>\r\n      similarPoint[key] > this.data.similarByA[key]\r\n    );\r\n    return isAllNumberOK.length === 0;\r\n  }\r\n\r\n  genGraph(maxSet, minSet, fixed, graph) {\r\n    if (maxSet.length < fixed) return;\r\n    let count = this.data.g1.length;\r\n    // let clearedA = [...new Set(this.data.A)];\r\n    // if (count > clearedA.length) {\r\n    //   count = clearedA.length;\r\n    // }\r\n    let minGen = this.generationMinimum(minSet, this.data.A, count, fixed);\r\n    let maxGen = this.generationMaximum(maxSet, this.data.A, count, fixed);\r\n    if (minGen.length !== maxGen.length) return;\r\n    for (let i = 0; i < minGen.length; i++) {\r\n      let max = new SetItem(\r\n        [...maxGen[i]],\r\n        this.calculateArrays([...maxGen[i]], this.data.g1_nums)\r\n      );\r\n      let min = new SetItem(\r\n        [...minGen[i]],\r\n        this.calculateArrays([...minGen[i]], this.data.g1_nums)\r\n      );\r\n      graph.push({\r\n        max, min, fixed\r\n      });\r\n    }\r\n  }\r\n\r\n  checkGraph(graph) {\r\n    for (let i = 0; i < graph.length; i++) {\r\n      let item = graph[i];\r\n      if (this.isInRelation(item.max.val, item.min.val, this.data.g1_value, this.data.g1_relation)) {\r\n        item.needCheck = false;\r\n      } else if (this.isOutInRelation(item.max.val, item.min.val, this.data.g1_value, this.data.g1_relation)) {\r\n        item.needCheck = true;\r\n        item.graph = [];\r\n        this.genGraph([...item.max.set], [...item.min.set], ++item.fixed, item.graph);\r\n        this.checkGraph(item.graph);\r\n      }\r\n    }\r\n  }\r\n\r\n  isInRelation(maxVal, minVal, relationValue, relation) {\r\n    switch (relation) {\r\n      case '=':\r\n        return maxVal === relationValue && minVal === relationValue;\r\n      case '>=':\r\n        return maxVal >= relationValue && minVal >= relationValue;\r\n      case '<=':\r\n        return maxVal <= relationValue && minVal <= relationValue;\r\n      case '>':\r\n        return maxVal > relationValue && minVal > relationValue;\r\n      case '<':\r\n        return maxVal < relationValue && minVal < relationValue;\r\n    }\r\n  }\r\n\r\n  isOutInRelation(maxVal, minVal, relationValue, relation) {\r\n    switch (relation) {\r\n      case '=':\r\n        return maxVal >= relationValue && minVal <= relationValue;\r\n      case '>=':\r\n        return maxVal >= relationValue && minVal <= relationValue;\r\n      case '<=':\r\n        return maxVal >= relationValue && minVal <= relationValue;\r\n      case '>':\r\n        return maxVal > relationValue && minVal < relationValue;\r\n      case '<':\r\n        return maxVal > relationValue && minVal < relationValue;\r\n    }\r\n  }\r\n\r\n  calculateArrays(valueArr, value2Arr) {\r\n    return valueArr.reduce((prev, item, index) => {\r\n      return prev += item * value2Arr[index];\r\n    }, 0);\r\n  }\r\n\r\n  genTable(item) {\r\n    return (<>\r\n      {item.map((item, index) => {\r\n        let classList = \"not-interested\";\r\n        if (item.needCheck === true) {\r\n          classList = \"need-check\";\r\n        } else if (item.needCheck === false) {\r\n          classList = \"not-check\"\r\n        }\r\n        return (\r\n          <tr key={index} className={classList}>\r\n            <td>{item.max.set.join(\" \")}</td>\r\n            <td><b>{item.max.val}</b></td>\r\n            <td>{index + 1}</td>\r\n            <td>{item.min.set.join(\" \")}</td>\r\n            <td><b>{item.min.val}</b></td>\r\n          </tr>)\r\n      })}\r\n    </>);\r\n  }\r\n\r\n  displayALl() {\r\n    return (<>\r\n      {this.data.table.map((item, index) => {\r\n        return (\r\n          <table key={index}>\r\n            <thead>\r\n            <tr>\r\n              <th>g1 max</th>\r\n              <th>val</th>\r\n              <th className=\"table-g\">g</th>\r\n              <th>g1 min</th>\r\n              <th>val</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {this.genTable(item)}\r\n            </tbody>\r\n          </table>)\r\n      })}\r\n    </>)\r\n  }\r\n\r\n  render() {\r\n    return (<div>\r\n      {this.displayALl()}\r\n    </div>)\r\n  }\r\n\r\n\r\n  test() {\r\n    function nextPermutation(array) {\r\n      // Find non-increasing suffix\r\n      var i = array.length - 1;\r\n      while (i > 0 && array[i - 1] >= array[i])\r\n        i--;\r\n      if (i <= 0)\r\n        return false;\r\n\r\n      // Find successor to pivot\r\n      var j = array.length - 1;\r\n      while (array[j] <= array[i - 1])\r\n        j--;\r\n      var temp = array[i - 1];\r\n      array[i - 1] = array[j];\r\n      array[j] = temp;\r\n\r\n      // Reverse suffix\r\n      j = array.length - 1;\r\n      while (i < j) {\r\n        temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n        i++;\r\n        j--;\r\n      }\r\n      return true;\r\n    }\r\n\r\n    var arr = [1, 2, 4, 5];\r\n    while (nextPermutation(arr)) {\r\n      var isIncreased = true;\r\n      for (var i = 1; i < arr.length - 1; i++) {\r\n        if (arr[i] < arr[i - 1]) isIncreased = false;\r\n      }\r\n      isIncreased && console.log(arr, isIncreased);\r\n    }\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\nimport AppSetData from \"./SetData\";\r\nimport AppCalculation from \"./Calculation\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport {Button} from \"react-bootstrap\";\r\n\r\nexport default class AppMain extends React.Component {\r\n\r\n  similar = [];\r\n  data = [];\r\n  modes = ['Permutation', 'Permutations with repetition'];\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isShowCalc: false,\r\n      mode: this.modes[0],\r\n      model: {},\r\n      modelCalc: []\r\n    };\r\n    this.handleDataSubmit = this.handleDataSubmit.bind(this);\r\n    this.reset = this.reset.bind(this);\r\n    this.changeMode = this.changeMode.bind(this);\r\n  }\r\n\r\n  changeMode(event) {\r\n    this.setState((state, props) => {\r\n      return {\r\n        ...state,\r\n        mode: event.target.value\r\n      }\r\n    });\r\n  }\r\n\r\n  handleDataSubmit(modelData) {\r\n    this.setState((state, props) => {\r\n      return {\r\n        ...state,\r\n        model: {...modelData},\r\n        isShowCalc: true\r\n      }\r\n    });\r\n  }\r\n\r\n  genModel = (idx) => {\r\n    return {\r\n      A: this.state.model.A,\r\n      g: this.state.model.g[idx].x,\r\n      g_limit: this.state.model.g[idx].limit,\r\n      g_relation: this.state.model.g[idx].relation,\r\n      mode: this.state.mode\r\n    }\r\n  };\r\n\r\n  reset() {\r\n    this.setState((state, props) => ({\r\n      isShowCalc: false\r\n    }));\r\n    this.data = [];\r\n  }\r\n\r\n  onCalcDone = (idx, maxLen) => data => {\r\n    this.data.push(data);\r\n    //if we calculate all g then check similar\r\n    if (this.data.length === maxLen) {\r\n      this.clearDuplicate();\r\n      this.getOnlySimilarInAllG();\r\n      console.log('SIMILAR', this.similar);\r\n    }\r\n  };\r\n\r\n  clearDuplicate(){\r\n    this.data.forEach( (item, index) => {\r\n      let clear = new Set();\r\n      item.forEach( i => {\r\n        let itemStr = i.join('_');\r\n        clear.add(itemStr);\r\n      });\r\n      const unical = Array.from(clear);\r\n      const unicalArr = unical.map(item => item.split('_').map( item => +item) );\r\n      this.data[index] = unicalArr;\r\n    });\r\n    console.log('CLEARED', this.data);\r\n  }\r\n\r\n  getOnlySimilarInAllG(){\r\n    let similarCount = {};\r\n    //create empty set for every g arrays\r\n    this.data.forEach( item => {\r\n      item.forEach( i => {\r\n        let itemStr = i.join('_');\r\n        if(!similarCount[itemStr]){\r\n          similarCount[itemStr] = 1;\r\n        } else {\r\n          similarCount[itemStr]++;\r\n        }\r\n      });\r\n    });\r\n    console.log('SIMILAR COUNT', similarCount);\r\n    let similarKeys = Object.keys(similarCount).filter( key =>\r\n      similarCount[key] === this.data.length );\r\n    this.similar = similarKeys.map(item => item.split('_').map( item => +item) );\r\n  }\r\n\r\n  getOnlySimilar2() {\r\n    let unical = {};\r\n    let common = {};\r\n    this.data.forEach(item => {\r\n      item.forEach(i => {\r\n        let itemStr = i.join('_');\r\n        if (unical[itemStr]) {\r\n          common[itemStr] = 'COMMON';\r\n        } else {\r\n          unical[itemStr] = 'UNICAL';\r\n        }\r\n      });\r\n    });\r\n    console.log(unical, common);\r\n  }\r\n\r\n  renderSteps(){\r\n    return (\r\n      <Accordion defaultActiveKey=\"0\">\r\n        {\r\n          this.state.model.g.map((g, idx, array) => (\r\n            this.renderStep(g, idx, array)\r\n          ))\r\n        }\r\n      </Accordion>\r\n    )\r\n}\r\n\r\n  renderStep(g, idx, array){\r\n    return (\r\n        <Card key={idx}>\r\n          <Card.Header>\r\n            <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey={idx}>\r\n              CALCULATED g {idx + 1}\r\n            </Accordion.Toggle>\r\n          </Card.Header>\r\n          <Accordion.Collapse eventKey={idx}>\r\n            <Card.Body>\r\n              <AppCalculation onCalcDone={this.onCalcDone(idx, array.length)}\r\n                              model={this.genModel(idx)}></AppCalculation>\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <button onClick={this.reset}>Reset</button>\r\n          <h4>Select mode:\r\n            <select value={this.state.mode}\r\n                    onChange={ (event) => {event.persist();this.changeMode(event);} }>\r\n              {\r\n                this.modes.map((m, idx) => {\r\n                  return (<option key={idx} value={m}>{m}</option>);\r\n                })\r\n              }\r\n            </select>\r\n          </h4>\r\n        </div>\r\n        <AppSetData\r\n          onDataSubmit={this.handleDataSubmit}/>\r\n\r\n        { this.state.isShowCalc && this.renderSteps() }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n","import React from 'react';\nimport './App.css';\nimport AppMain from \"./Main\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Horizontal Method\n      </header>\n      <main>\n        <AppMain></AppMain>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}